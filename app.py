"""
üöÄ Telegram Channel Analyzer FastAPI with Comments
========================================================
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π.
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""
import asyncio
import os
import json
import logging
import base64
import re
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Any, Union
from contextlib import asynccontextmanager

# FastAPI –∏ Pydantic –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, validator

# Telegram API –∏–º–ø–æ—Ä—Ç—ã
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Channel, Message, MessageService
from telethon.errors import SessionPasswordNeededError, FloodWaitError, ChannelPrivateError
from telethon.tl.types import InputPeerChannel

# Uvicorn –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
import uvicorn

# ==============================================================================
# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SESSION_NAME = "telegram_analyzer_session"
SESSION_FILE = f"{SESSION_NAME}.session"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
telegram_client: Optional[TelegramClient] = None

# ==============================================================================
# üìã PYDANTIC –ú–û–î–ï–õ–ò –î–õ–Ø API
# ==============================================================================

class CommentInfo(BaseModel):
    author: Optional[str] = Field(default="Unknown", description="–ò–º—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    date: str = Field(..., description="–î–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    text: str = Field(..., description="–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

class PostInfo(BaseModel):
    date: str
    type: str
    views: int
    comments: int
    reactions: int
    forwards: int
    content: str
    url: str

class PostWithComments(BaseModel):
    post_info: PostInfo
    comments: List[CommentInfo]

class ChannelAnalysisRequest(BaseModel):
    channel_username: str = Field(
        ..., 
        description="Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @DavBlog –∏–ª–∏ DavBlog)",
        min_length=1,
        max_length=100
    )
    start_date: str = Field(
        ..., 
        description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"
    )
    end_date: str = Field(
        ..., 
        description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"
    )
    include_comments: Optional[bool] = Field(
        default=True,
        description="–í–∫–ª—é—á–∞—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
    )

    @validator('channel_username')
    def validate_channel_username(cls, v):
        v = v.strip()
        if not v:
            raise ValueError("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if v.startswith('@'):
            v = v[1:]
        
        if not v.replace('_', '').replace('-', '').isalnum():
            raise ValueError("–ò–º—è –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
        return v

    @validator('start_date', 'end_date')
    def validate_date_format(cls, v):
        try:
            datetime.strptime(v, '%d.%m.%Y')
            return v
        except ValueError:
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY")

    @validator('end_date', pre=True)
    def check_date_range(cls, v, values):
        start_date = values.get('start_date')
        if start_date:
            start = datetime.strptime(start_date, '%d.%m.%Y')
            end = datetime.strptime(v, '%d.%m.%Y')
            if end < start:
                raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
            if (end - start).days > 365:
                raise ValueError("–ü–µ—Ä–∏–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 365 –¥–Ω–µ–π")
        return v

class ChannelAnalysisResponse(BaseModel):
    success: bool
    channel_title: str
    channel_username: Optional[str]
    channel_id: int
    subscribers_count: Optional[int]
    discussion_group_id: Optional[int]
    analysis_period: str
    total_messages_analyzed: int
    posts: Dict[str, PostWithComments]
    analysis_timestamp: str

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    telegram_client_status: str
    version: str = "1.0.0"

# ==============================================================================
# üîê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ï–î–ï–ù–¶–ò–ê–õ–ê–ú–ò TELEGRAM
# ==============================================================================

def get_telegram_credentials() -> tuple[str, str, str]:
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH') 
    phone = os.getenv('TELEGRAM_PHONE')
    
    missing_vars = []
    if not api_id:
        missing_vars.append('TELEGRAM_API_ID')
    if not api_hash:
        missing_vars.append('TELEGRAM_API_HASH')
    if not phone:
        missing_vars.append('TELEGRAM_PHONE')
    
    if missing_vars:
        raise ValueError(
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
        )
    
    logger.info(f"–ö—Ä–µ–¥–µ–Ω—Ü–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone[:4]}****{phone[-4:]}")
    return api_id, api_hash, phone

# ==============================================================================
# ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï TELEGRAM –ö–õ–ò–ï–ù–¢–û–ú
# ==============================================================================

async def init_telegram_client() -> TelegramClient:
    try:
        api_id, api_hash, phone = get_telegram_credentials()
        
        session_exists = os.path.exists(SESSION_FILE)
        
        if not session_exists:
            session_b64 = os.getenv('TELEGRAM_SESSION_BASE64')
            if session_b64:
                try:
                    session_data = base64.b64decode(session_b64)
                    with open(SESSION_FILE, 'wb') as f:
                        f.write(session_data)
                    logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å–æ–∑–¥–∞–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    session_exists = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        
        client = TelegramClient(SESSION_NAME, int(api_id), api_hash)
        
        password = os.getenv('TELEGRAM_2FA_PASSWORD')
        if password:
            await client.start(phone, password=password)
        else:
            await client.start(phone)
        
        me = await client.get_me()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (ID: {me.id})")
        
        return client
        
    except SessionPasswordNeededError:
        raise Exception(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. "
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_2FA_PASSWORD."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        if os.path.exists(SESSION_FILE) and ("auth" in str(e).lower() or "invalid" in str(e).lower()):
            try:
                os.remove(SESSION_FILE)
                logger.info("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω.")
            except Exception as rm_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {rm_error}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç: {str(e)}")

async def get_telegram_client() -> TelegramClient:
    global telegram_client
    
    if telegram_client is None or not telegram_client.is_connected():
        telegram_client = await init_telegram_client()
    
    return telegram_client

# ==============================================================================
# üìä –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# ==============================================================================

async def find_channel(client: TelegramClient, channel_username: str) -> Channel:
    try:
        original_username = channel_username
        search_username = original_username.lower()
        
        logger.info(f"–ò—â–µ–º –∫–∞–Ω–∞–ª: {original_username} (–ø–æ–∏—Å–∫: @{search_username})")
        
        try:
            target_channel = await client.get_entity(f"@{search_username}")
        except ValueError:
            logger.info(f"–ö–∞–Ω–∞–ª @{search_username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫...")
            search_results = await client.get_dialogs()
            
            for dialog in search_results:
                if (hasattr(dialog.entity, 'username') and 
                    dialog.entity.username and 
                    dialog.entity.username.lower() == search_username):
                    target_channel = dialog.entity
                    break
            else:
                raise HTTPException(
                    status_code=404,
                    detail=f"–ö–∞–Ω–∞–ª @{original_username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
        
        if not isinstance(target_channel, Channel):
            raise HTTPException(
                status_code=400,
                detail=f"@{original_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º"
            )
        
        actual_username = getattr(target_channel, 'username', '')
        if actual_username.lower() != search_username:
            logger.warning(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª @{actual_username} –≤–º–µ—Å—Ç–æ @{original_username}")
            raise HTTPException(
                status_code=404,
                detail=f"–ö–∞–Ω–∞–ª @{original_username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª @{actual_username}"
            )
        
        logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {target_channel.title} (@{actual_username})")
        return target_channel
        
    except ChannelPrivateError:
        raise HTTPException(
            status_code=403,
            detail=f"–ö–∞–Ω–∞–ª @{channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
        raise HTTPException(
            status_code=404,
            detail=f"–ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}"
        )

async def get_channel_info(client: TelegramClient, channel: Channel, original_username: str = None) -> dict:
    display_username = original_username if original_username else getattr(channel, 'username', None)
    
    info = {
        'title': channel.title,
        'username': display_username,
        'id': channel.id,
        'subscribers_count': None,
        'discussion_group_id': None
    }
    
    try:
        full_info = await client(GetFullChannelRequest(channel))
        info['subscribers_count'] = full_info.full_chat.participants_count
        
        if hasattr(full_info.full_chat, 'linked_chat_id') and full_info.full_chat.linked_chat_id:
            info['discussion_group_id'] = full_info.full_chat.linked_chat_id
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ID {info['discussion_group_id']}")
            
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
        info['subscribers_count'] = getattr(channel, 'participants_count', None)
    
    return info

async def get_channel_messages(client: TelegramClient, channel: Channel, start_date: str, end_date: str) -> list:
    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {start_date} –ø–æ {end_date}")
    
    try:
        start = datetime.strptime(start_date, '%d.%m.%Y').replace(tzinfo=timezone.utc)
        end = datetime.strptime(end_date, '%d.%m.%Y').replace(tzinfo=timezone.utc) + timedelta(days=1) - timedelta(seconds=1)
        
        all_messages = await client.get_messages(channel, limit=1000)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        filtered_messages = [msg for msg in all_messages if start <= msg.date.replace(tzinfo=timezone.utc) <= end]
        
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        return filtered_messages
        
    except FloodWaitError as e:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
        raise HTTPException(
            status_code=429,
            detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫—É–Ω–¥"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        )

async def process_comment_message(client: TelegramClient, message) -> Optional[CommentInfo]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    try:
        author_name = "Unknown"
        if message.sender_id:
            try:
                sender = await client.get_entity(message.sender_id)
                if hasattr(sender, 'first_name'):
                    author_name = sender.first_name
                    if hasattr(sender, 'last_name') and sender.last_name:
                        author_name += f" {sender.last_name}"
                elif hasattr(sender, 'username') and sender.username:
                    author_name = f"@{sender.username}"
                elif hasattr(sender, 'title'):
                    author_name = sender.title
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ {message.sender_id}: {e}")
        
        msg_date = message.date
        if msg_date.tzinfo is None:
            msg_date = msg_date.replace(tzinfo=timezone.utc)
        formatted_date = msg_date.strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        text = getattr(message, 'message', '').strip()
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
        if not text:
            if hasattr(message, 'media') and message.media:
                media_type = get_media_type(message.media)
                text = f"[{media_type}]"
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message.id}")
                return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        if not text or text.isspace() or text in ['[–ú–µ–¥–∏–∞]', '[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]']:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{text}'")
            return None
        
        return CommentInfo(
            author=author_name,
            date=formatted_date,
            text=text[:500]
        )
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return None

async def get_post_comments(client: TelegramClient, entity: Union[Channel, str], post_id: int) -> List[CommentInfo]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º iter_messages
    """
    comments = []
    
    try:
        logger.info(f"–ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        
        async for message in client.iter_messages(entity, reply_to=post_id):
            comment = await process_comment_message(client, message)
            if comment:
                comments.append(comment)
                logger.debug(f"–ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {comment.text[:50]}...")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {post_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    return comments

def get_media_type(media) -> str:
    if media is None:
        return "–¢–µ–∫—Å—Ç"
    
    media_type = str(type(media).__name__)
    
    if 'Photo' in media_type:
        return "–§–æ—Ç–æ"
    elif 'Video' in media_type:
        return "–í–∏–¥–µ–æ"
    elif 'Document' in media_type:
        return "–î–æ–∫—É–º–µ–Ω—Ç"
    elif 'Audio' in media_type:
        return "–ê—É–¥–∏–æ"
    elif 'Sticker' in media_type:
        return "–°—Ç–∏–∫–µ—Ä"
    elif 'Poll' in media_type:
        return "–û–ø—Ä–æ—Å"
    elif 'WebPage' in media_type:
        return "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    elif 'Game' in media_type:
        return "–ò–≥—Ä–∞"
    else:
        return "–ú–µ–¥–∏–∞"

async def process_channel_posts_with_comments(
    client: TelegramClient, 
    messages: list, 
    channel: Channel,
    discussion_group_id: Optional[int],
    include_comments: bool = True
) -> dict:
    posts_data = {}
    processed_count = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(messages)} –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {include_comments}")
    
    for i, msg in enumerate(messages, 1):
        try:
            if isinstance(msg, MessageService):
                continue
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç {i}: ID={msg.id}, –î–∞—Ç–∞={msg.date}")
            
            post_type = "–¢–µ–∫—Å—Ç"
            content = ""
            
            if hasattr(msg, 'message') and msg.message:
                content = msg.message.strip()
            
            if hasattr(msg, 'media') and msg.media:
                media_type = get_media_type(msg.media)
                post_type = media_type
                if content:
                    content = f"[{media_type}] {content}"
                else:
                    content = f"[{media_type}]"
            
            if not content:
                content = "[–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç]"
            
            views_count = getattr(msg, 'views', 0) or 0
            
            reactions_count = 0
            try:
                if hasattr(msg, 'reactions') and msg.reactions and hasattr(msg.reactions, 'results'):
                    if msg.reactions.results:
                        reactions_count = sum([r.count for r in msg.reactions.results if hasattr(r, 'count') and r.count])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {msg.id}: {e}")
            
            forwards_count = getattr(msg, 'forwards', 0) or 0
            
            msg_date = msg.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            formatted_date = msg_date.strftime("%Y-%m-%d %H:%M:%S")
            
            channel_username = getattr(channel, 'username', None)
            post_link = ""
            if channel_username:
                post_link = f"https://t.me/{channel_username}/{msg.id}"
            else:
                post_link = f"–ü–æ—Å—Ç #{msg.id}"
            
            comments_count = 0
            comments_list = []
            
            if include_comments and discussion_group_id:
                comments_list = await get_post_comments(client, channel, msg.id)
                comments_count = len(comments_list)
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                if comments_list:
                    for j, comment in enumerate(comments_list, 1):
                        logger.info(f"–ü–æ—Å—Ç {msg.id}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {j}: '{comment.text}'")
                else:
                    logger.info(f"–î–ª—è –ø–æ—Å—Ç–∞ {msg.id} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            post_info = PostInfo(
                date=formatted_date,
                type=post_type,
                views=views_count,
                comments=comments_count,
                reactions=reactions_count,
                forwards=forwards_count,
                content=content[:1000],
                url=post_link
            )
            
            posts_data[str(msg.id)] = PostWithComments(
                post_info=post_info,
                comments=comments_list
            )
            
            processed_count += 1
            logger.info(f"–ü–æ—Å—Ç {msg.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {msg.id}: {e}")
            continue
    
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {processed_count}/{len(messages)}")
    return posts_data

# ==============================================================================
# üåê LIFESPAN MANAGEMENT
# ==============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Channel Analyzer API —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
    
    try:
        global telegram_client
        telegram_client = await init_telegram_client()
        logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    yield
    
    if telegram_client:
        await telegram_client.disconnect()
        logger.info("üîê Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

# ==============================================================================
# üåç –°–û–ó–î–ê–ù–ò–ï FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================================================

app = FastAPI(
    title="Telegram Channel Analyzer with Comments",
    description="ü§ñ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏",
    version="1.3.0",
    lifespan=lifespan
)

# ==============================================================================
# üìç API –≠–ù–î–ü–û–ò–ù–¢–´
# ==============================================================================

@app.get("/", response_model=HealthResponse)
async def root():
    return HealthResponse(
        status="running",
        timestamp=datetime.now(timezone.utc).isoformat(),
        telegram_client_status="connected" if telegram_client and telegram_client.is_connected() else "disconnected"
    )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    client_status = "disconnected"
    
    try:
        if telegram_client and telegram_client.is_connected():
            await telegram_client.get_me()
            client_status = "connected"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        client_status = "error"
    
    return HealthResponse(
        status="healthy" if client_status == "connected" else "unhealthy",
        timestamp=datetime.now(timezone.utc).isoformat(),
        telegram_client_status=client_status
    )

@app.post("/analyze", response_model=ChannelAnalysisResponse)
async def analyze_channel(request: ChannelAnalysisRequest):
    start_time = datetime.now(timezone.utc)
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: @{request.channel_username} —Å {request.start_date} –ø–æ {request.end_date}")
    
    try:
        client = await get_telegram_client()
        channel = await find_channel(client, request.channel_username)
        channel_info = await get_channel_info(client, channel, request.channel_username)
        
        messages = await get_channel_messages(
            client, 
            channel, 
            request.start_date, 
            request.end_date
        )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        if not messages:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return ChannelAnalysisResponse(
                success=True,
                channel_title=channel_info['title'],
                channel_username=channel_info['username'],
                channel_id=channel_info['id'],
                subscribers_count=channel_info['subscribers_count'],
                discussion_group_id=channel_info['discussion_group_id'],
                analysis_period=f"{request.start_date} - {request.end_date}",
                total_messages_analyzed=0,
                posts={},
                analysis_timestamp=start_time.isoformat()
            )
        
        posts_data = await process_channel_posts_with_comments(
            client,
            messages, 
            channel,
            channel_info['discussion_group_id'],
            request.include_comments
        )
        
        end_time = datetime.now(timezone.utc)
        processing_time = (end_time - start_time).total_seconds()
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤")
        
        return ChannelAnalysisResponse(
            success=True,
            channel_title=channel_info['title'],
            channel_username=channel_info['username'],
            channel_id=channel_info['id'],
            subscribers_count=channel_info['subscribers_count'],
            discussion_group_id=channel_info['discussion_group_id'],
            analysis_period=f"{request.start_date} - {request.end_date}",
            total_messages_analyzed=len(posts_data),
            posts=posts_data,
            analysis_timestamp=start_time.isoformat()
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@app.get("/status")
async def get_status():
    try:
        client_info = {}
        
        if telegram_client and telegram_client.is_connected():
            try:
                me = await telegram_client.get_me()
                client_info = {
                    "connected": True,
                    "user_id": me.id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "phone": me.phone
                }
            except Exception as e:
                client_info = {"connected": False, "error": str(e)}
        else:
            client_info = {"connected": False, "reason": "Client not initialized"}
        
        return {
            "service": "Telegram Channel Analyzer with Comments",
            "version": "1.3.0",
            "status": "running",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "telegram_client": client_info
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "service": "Telegram Channel Analyzer",
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        )

# ==============================================================================
# üöÄ –¢–û–ß–ö–ê –í–•–û–î–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================================================

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/docs")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        log_level="info",
        reload=False
    )
