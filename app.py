# main.py
"""
üöÄ Telegram Channel Analyzer FastAPI
====================================

–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é FastAPI.
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∞–∫—Ü–∏–∏, –ø–µ—Ä–µ—Å—ã–ª–∫–∏.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import asyncio
import os
import json
import logging
import base64
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Any
from contextlib import asynccontextmanager

# FastAPI –∏ Pydantic –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, validator

# Telegram API –∏–º–ø–æ—Ä—Ç—ã
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Channel
from telethon.errors import SessionPasswordNeededError, FloodWaitError, ChannelPrivateError

# Uvicorn –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
import uvicorn

# ==============================================================================
# üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LIMIT_MESSAGES = int(os.getenv("LIMIT_MESSAGES", "200"))  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
DAYS_BACK = int(os.getenv("DAYS_BACK", "30"))            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
SESSION_NAME = "telegram_analyzer_session"                # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
SESSION_FILE = f"{SESSION_NAME}.session"                  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
telegram_client: Optional[TelegramClient] = None

# ==============================================================================
# üìã PYDANTIC –ú–û–î–ï–õ–ò –î–õ–Ø API
# ==============================================================================

class ChannelAnalysisRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
    channel_username: str = Field(
        ..., 
        description="Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel –∏–ª–∏ mychannel)",
        min_length=1,
        max_length=100
    )
    limit_messages: Optional[int] = Field(
        default=LIMIT_MESSAGES,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        ge=1,
        le=1000
    )
    days_back: Optional[int] = Field(
        default=DAYS_BACK,
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
        ge=1,
        le=365
    )

    @validator('channel_username')
    def validate_channel_username(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞"""
        v = v.strip()
        if not v:
            raise ValueError("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        if v.startswith('@'):
            v = v[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
        if not v.replace('_', '').replace('-', '').isalnum():
            raise ValueError("–ò–º—è –∫–∞–Ω–∞–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
        return v


class PostInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ"""
    date: str
    type: str
    views: int
    comments: int
    reactions: int
    forwards: int
    content: str
    url: str


class Comment(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    author: str
    date: str
    text: str


class MessageData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    post_info: PostInfo
    comments: List[Comment]


class ChannelAnalysisResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
    success: bool
    channel_title: str
    channel_username: Optional[str]
    channel_id: int
    subscribers_count: Optional[int]
    analysis_period: str
    total_messages_analyzed: int
    messages: Dict[str, MessageData]
    analysis_timestamp: str


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    status: str
    timestamp: str
    telegram_client_status: str
    version: str = "1.0.0"


class ErrorResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
    success: bool = False
    error: str
    error_code: str
    timestamp: str

# ==============================================================================
# üîê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ï–î–ï–ù–¶–ò–ê–õ–ê–ú–ò TELEGRAM
# ==============================================================================

def get_telegram_credentials() -> tuple[str, str, str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        tuple: (api_id, api_hash, phone)
        
    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    """
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH') 
    phone = os.getenv('TELEGRAM_PHONE')
    
    missing_vars = []
    if not api_id:
        missing_vars.append('TELEGRAM_API_ID')
    if not api_hash:
        missing_vars.append('TELEGRAM_API_HASH')
    if not phone:
        missing_vars.append('TELEGRAM_PHONE')
    
    if missing_vars:
        raise ValueError(
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}\n"
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
            f"- TELEGRAM_API_ID: –≤–∞—à API ID\n"
            f"- TELEGRAM_API_HASH: –≤–∞—à API Hash\n" 
            f"- TELEGRAM_PHONE: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567"
        )
    
    logger.info(f"–ö—Ä–µ–¥–µ–Ω—Ü–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone[:4]}****{phone[-4:]}")
    return api_id, api_hash, phone

# ==============================================================================
# ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï TELEGRAM –ö–õ–ò–ï–ù–¢–û–ú
# ==============================================================================

async def init_telegram_client() -> TelegramClient:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞.
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å –µ—ë –∏–∑ TELEGRAM_SESSION_BASE64.
    –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
    
    Returns:
        TelegramClient: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    try:
        api_id, api_hash, phone = get_telegram_credentials()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        session_exists = os.path.exists(SESSION_FILE)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not session_exists:
            session_b64 = os.getenv('TELEGRAM_SESSION_BASE64')
            if session_b64:
                try:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                    session_data = base64.b64decode(session_b64)
                    with open(SESSION_FILE, 'wb') as f:
                        f.write(session_data)
                    logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å–æ–∑–¥–∞–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_SESSION_BASE64")
                    session_exists = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient(SESSION_NAME, int(api_id), api_hash)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è. –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å, –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 2FA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        password = os.getenv('TELEGRAM_2FA_PASSWORD')
        if password:
             await client.start(phone, password=password)
        else:
             await client.start(phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        me = await client.get_me()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (ID: {me.id})")
        
        return client
        
    except SessionPasswordNeededError:
        raise Exception(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–∞—Ä–æ–ª—å). "
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_2FA_PASSWORD."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å —Å–µ—Å—Å–∏–µ–π
        if os.path.exists(SESSION_FILE) and ("auth" in str(e).lower() or "invalid" in str(e).lower()):
             try:
                 os.remove(SESSION_FILE)
                 logger.info("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω.")
             except Exception as rm_error:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {rm_error}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç: {str(e)}")


async def get_telegram_client() -> TelegramClient:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    Returns:
        TelegramClient: –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    global telegram_client
    
    if telegram_client is None or not telegram_client.is_connected():
        telegram_client = await init_telegram_client()
    
    return telegram_client

# ==============================================================================
# üìä –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# ==============================================================================

async def find_channel(client: TelegramClient, channel_username: str) -> Channel:
    """
    –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        channel_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞
        
    Returns:
        Channel: –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not channel_username.startswith('@'):
            channel_username = f'@{channel_username}'
        
        target_channel = await client.get_entity(channel_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–∞–Ω–∞–ª
        if not isinstance(target_channel, Channel):
            raise HTTPException(
                status_code=400,
                detail=f"{channel_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º"
            )
        
        logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {target_channel.title}")
        return target_channel
        
    except ChannelPrivateError:
        raise HTTPException(
            status_code=403,
            detail=f"–ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
        raise HTTPException(
            status_code=404,
            detail=f"–ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}"
        )


async def get_channel_info(client: TelegramClient, channel: Channel) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        channel: –ö–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
    """
    info = {
        'title': channel.title,
        'username': getattr(channel, 'username', None),
        'id': channel.id,
        'subscribers_count': None
    }
    
    try:
        full_info = await client(GetFullChannelRequest(channel))
        info['subscribers_count'] = full_info.full_chat.participants_count
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {info['subscribers_count']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
        info['subscribers_count'] = getattr(channel, 'participants_count', None)
    
    return info


async def get_messages(client: TelegramClient, channel: Channel, limit: int, days_back: int) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, –∏—Å–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã)
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        channel: –ö–∞–Ω–∞–ª
        limit: –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        days_back: –î–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π-–ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
    """
    offset_date = datetime.now(timezone.utc) - timedelta(days=days_back)
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        all_messages = await client.get_messages(channel, limit=limit)
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        # –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç post_author != None
        messages = []
        for msg in all_messages:
            msg_date = msg.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ (post_author == None –¥–ª—è –ø–æ—Å—Ç–æ–≤)
            if msg_date >= offset_date and msg.post_author is None:
                messages.append(msg)
        
        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return messages
        
    except FloodWaitError as e:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
        raise HTTPException(
            status_code=429,
            detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫—É–Ω–¥"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        )


def get_media_type(media) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    
    Args:
        media: –ú–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç
        
    Returns:
        str: –¢–∏–ø –º–µ–¥–∏–∞
    """
    media_type = str(type(media).__name__)
    
    if 'Photo' in media_type:
        return "–§–æ—Ç–æ"
    elif 'Video' in media_type or 'Document' in media_type:
        return "–í–∏–¥–µ–æ/–î–æ–∫—É–º–µ–Ω—Ç"
    elif 'Audio' in media_type:
        return "–ê—É–¥–∏–æ"
    elif 'Sticker' in media_type:
        return "–°—Ç–∏–∫–µ—Ä"
    elif 'Poll' in media_type:
        return "–û–ø—Ä–æ—Å"
    elif 'WebPage' in media_type:
        return "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    else:
        return "–ú–µ–¥–∏–∞"


async def process_messages(client: TelegramClient, messages: list, channel: Channel) -> dict:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π-–ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
        channel: –ö–∞–Ω–∞–ª
        
    Returns:
        dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    data = {}
    processed_count = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    for i, msg in enumerate(reversed(messages), 1):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            msg_type = "—Ç–µ–∫—Å—Ç"
            content = ""
            
            if hasattr(msg, 'message') and msg.message:
                content = msg.message[:200] + "..." if len(msg.message) > 200 else msg.message
            elif hasattr(msg, 'media') and msg.media:
                msg_type = get_media_type(msg.media)
                content = f"[{msg_type}]"
            else:
                msg_type = "–ø—Ä–æ—á–µ–µ"
                content = "[–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            views_count = getattr(msg, 'views', 0) or 0
            replies_count = 0
            if hasattr(msg, 'replies') and msg.replies:
                replies_count = getattr(msg.replies, 'replies', 0) or 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
            reactions_count = 0
            try:
                if hasattr(msg, 'reactions') and msg.reactions and msg.reactions.results:
                    reactions_count = sum([r.count for r in msg.reactions.results if r.count])
            except:
                reactions_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—ã–ª–æ–∫
            forwards_count = getattr(msg, 'forwards', 0) or 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            msg_date = msg.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            formatted_date = msg_date.strftime("%Y-%m-%d %H:%M:%S")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            channel_username = getattr(channel, 'username', None)
            message_link = ""
            if channel_username:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
                message_link = f"https://t.me/{channel_username}/{msg.id}"
            else:
                message_link = f"–°–æ–æ–±—â–µ–Ω–∏–µ #{msg.id}"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_data = []
            if replies_count > 0:
                try:
                    comment_count = 0
                    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º entity=channel, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
                    async for comment in client.iter_messages(entity=channel, reply_to=msg.id, reverse=True):
                        if comment_count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            break
                        
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (post_author == None –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
                        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç post_author == None
                        if comment.post_author is not None:
                            comment_count += 1
                            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        
                        comment_date = comment.date.strftime("%Y-%m-%d %H:%M:%S") if comment.date else "N/A"
                        comment_text = comment.message if comment.message else "[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]"
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                        if len(comment_text) > 100:
                            comment_text = comment_text[:100] + "..."
                        
                        comments_data.append({
                            'author': str(comment.sender_id),
                            'date': comment_date,
                            'text': comment_text
                        })
                        comment_count += 1
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
                    comments_data = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            data[str(msg.id)] = {
                'post_info': {
                    'date': formatted_date,
                    'type': msg_type,
                    'views': views_count,
                    'comments': replies_count,
                    'reactions': reactions_count,
                    'forwards': forwards_count,
                    'content': content,
                    'url': message_link
                },
                'comments': comments_data
            }
            
            processed_count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if i % 10 == 0:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
            continue
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed_count}")
    return data

# ==============================================================================
# üåê LIFESPAN MANAGEMENT
# ==============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Channel Analyzer API")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        global telegram_client
        telegram_client = await init_telegram_client()
        logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ /health
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if telegram_client:
        await telegram_client.disconnect()
        logger.info("üîê Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

# ==============================================================================
# üåç –°–û–ó–î–ê–ù–ò–ï FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================================================

app = FastAPI(
    title="Telegram Channel Analyzer",
    description="ü§ñ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# ==============================================================================
# üìç API –≠–ù–î–ü–û–ò–ù–¢–´
# ==============================================================================

@app.get("/", response_model=HealthResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return HealthResponse(
        status="running",
        timestamp=datetime.now(timezone.utc).isoformat(),
        telegram_client_status="connected" if telegram_client and telegram_client.is_connected() else "disconnected"
    )


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    client_status = "disconnected"
    
    try:
        if telegram_client and telegram_client.is_connected():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            await telegram_client.get_me()
            client_status = "connected"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        client_status = "error"
    
    return HealthResponse(
        status="healthy" if client_status == "connected" else "unhealthy",
        timestamp=datetime.now(timezone.utc).isoformat(),
        telegram_client_status=client_status
    )


@app.post("/analyze", response_model=ChannelAnalysisResponse)
async def analyze_channel(request: ChannelAnalysisRequest):
    """
    –ê–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
    
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ –≤–∫–ª—é—á–∞—è:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏  
    - –†–µ–∞–∫—Ü–∏–∏
    - –ü–µ—Ä–µ—Å—ã–ª–∫–∏
    - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–æ–≤
    
    Args:
        request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        ChannelAnalysisResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    start_time = datetime.now(timezone.utc)
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: @{request.channel_username}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = await get_telegram_client()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
        channel = await find_channel(client, request.channel_username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await get_channel_info(client, channel)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞)
        messages = await get_messages(
            client, 
            channel, 
            request.limit_messages, 
            request.days_back
        )
        
        if not messages:
            return ChannelAnalysisResponse(
                success=True,
                channel_title=channel_info['title'],
                channel_username=channel_info['username'],
                channel_id=channel_info['id'],
                subscribers_count=channel_info['subscribers_count'],
                analysis_period=f"{request.days_back} –¥–Ω–µ–π",
                total_messages_analyzed=0,
                messages={},
                analysis_timestamp=start_time.isoformat()
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        processed_data = await process_messages(client, messages, channel)
        
        end_time = datetime.now(timezone.utc)
        processing_time = (end_time - start_time).total_seconds()
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return ChannelAnalysisResponse(
            success=True,
            channel_title=channel_info['title'],
            channel_username=channel_info['username'],
            channel_id=channel_info['id'],
            subscribers_count=channel_info['subscribers_count'],
            analysis_period=f"{request.days_back} –¥–Ω–µ–π",
            total_messages_analyzed=len(processed_data),
            messages=processed_data,
            analysis_timestamp=start_time.isoformat()
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–æ—Å HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )


@app.get("/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        client_info = {}
        
        if telegram_client and telegram_client.is_connected():
            try:
                me = await telegram_client.get_me()
                client_info = {
                    "connected": True,
                    "user_id": me.id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "phone": me.phone
                }
            except Exception as e:
                client_info = {"connected": False, "error": str(e)}
        else:
            client_info = {"connected": False, "reason": "Client not initialized"}
        
        return {
            "service": "Telegram Channel Analyzer",
            "version": "1.0.0",
            "status": "running",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "telegram_client": client_info,
            "settings": {
                "default_limit_messages": LIMIT_MESSAGES,
                "default_days_back": DAYS_BACK
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "service": "Telegram Channel Analyzer",
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        )

# ==============================================================================
# üöÄ –¢–û–ß–ö–ê –í–•–û–î–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================================================

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    port = int(os.environ.get("PORT", 8000))
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/docs")
    
    uvicorn.run(
        "main:app",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ main.py
        host="0.0.0.0",
        port=port,
        log_level="info",
        reload=False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    )
